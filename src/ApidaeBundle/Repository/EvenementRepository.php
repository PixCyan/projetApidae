<?php

namespace ApidaeBundle\Repository;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * EvenementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvenementRepository extends \Doctrine\ORM\EntityRepository {

    /**
     * Renvoie la liste des évènements ouverts poiur la date actuelle
     * @return array
     */
    public function getAujourdhui() {
        $date = new \DateTime();
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('o')
            ->from('ApidaeBundle:Ouverture', 'o')
            ->where('o.ouvDateDebut = ?1')
            ->setParameters(array(1 => $date->format('Y-m-d')));
        $query = $qb->getQuery();
        $q = $query->getResult();
        $evenements = array();
        foreach($q as $elem) {
            if($elem->getObjetApidae()->getObjTypeApidae() == "FETE_ET_MANIFESTATION") {
                $evenements[] = $elem->getObjetApidae();
            }
        }
        return $evenements;
    }

    /**
     * Renvoie la liste des objets touristiques ouvert durant un interval donné
     * @param $periode
     * @return array
     */
    public function getInterval($periode) {
        $dateNow = new \DateTime();
        $date = new \DateTime('+'.$periode.' days');
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('o')
            ->from('ApidaeBundle:Ouverture', 'o')
            ->where('o.ouvDateDebut BETWEEN ?1 AND ?2')
            ->setParameters(array(1 => $dateNow->format('Y-m-d'), 2 => $date->format('Y-m-d')));
        $query = $qb->getQuery();
        $q = $query->getResult();
        $evenements = array();
        foreach($q as $elem) {
            if($elem->getObjetApidae()->getObjTypeApidae() == "FETE_ET_MANIFESTATION") {
                $evenements[] = $elem->getObjetApidae();
            }
        }
        return $evenements;
    }
}
